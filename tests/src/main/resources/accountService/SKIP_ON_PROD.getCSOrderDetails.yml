sequence: new
sequenceName: getCSOrderDetails
comment: Solr List Url
id: solrQuery
request:
  method: GET
  uri: http://{ENV}uss001.{ENV}.com:8080/solr/sale/select?q=*:*&rows=1&sort=dateLastIndexed desc
---
comment: parse xml field to extract sale id
id: extractId
type: groovy
parameters: '{solrQuery:response.bodyAsString}'
script: |
  response = new XmlParser().parseText(parameters)
  def id
  response.result[0].doc[0].each{ node-> if(node.@name == 'id'){id=node.text()}

  }
  return id
---
comment: parse xml field to extract seller id
id: extractSellerId
type: groovy
parameters: '{solrQuery:response.bodyAsString}'
script: |
  response = new XmlParser().parseText(parameters)
    def sellerId
    response.result[0].doc[0].each{ node-> if(node.@name == 'sellerId'){sellerId=node.text()}

    }
  return sellerId
---
type: sequenceCache
key: 'userId'
value: '{extractSellerId:groovy}'
---
include: login
---
id: fix
type: fixture
parameters:
  auth: 'Bearer JYf0azPrf1RAvhUhpGZudVU9bBEa'
---
comment: invalid access
verbose: true
id: invalidAccess
request:
  method: POST
  subDomain: api-dev
  uri: '/accountmanagement/csorderdetails/v1/'
  headers:
    - Accept: application/json
    - Content-Type: application/json
    - Authorization: '{fix:parameters.auth}'
  body:
      csOrderDetailsRequest:
        orderId: '{extractId:groovy}'
response:
  code: 403
---
comment: orderId & proxiedId both empty
verbose: true
id: badRequest1
request:
  method: POST
  subDomain: api-dev
  uri: '/accountmanagement/csorderdetails/v1/'
  headers:
    - Accept: application/json
    - Content-Type: application/json
    - X-csrf-Token: '{web.login:response.body.login.csrf_token}'
    - Cookie: '{token.init:response.cookie.SH_UT.raw}'
  body:
      csOrderDetailsRequest:
        start: 0
response:
  code: 400
---
comment: orderId & proxiedId both not empty
verbose: true
id: badRequest2
request:
  method: POST
  subDomain: api-dev
  uri: '/accountmanagement/csorderdetails/v1/'
  headers:
    - Accept: application/json
    - Content-Type: application/json
    - X-csrf-Token: '{web.login:response.body.login.csrf_token}'
    - Cookie: '{token.init:response.cookie.SH_UT.raw}'
  body:
      csOrderDetailsRequest:
        orderId: 1
        proxiedId: 1
response:
  code: 400
---
comment: invalid sale id
verbose: true
id: badRequest3
request:
  method: POST
  subDomain: api-dev
  uri: '/accountmanagement/csorderdetails/v1/'
  headers:
    - Accept: application/json
    - Content-Type: application/json
    - X-csrf-Token: '{web.login:response.body.login.csrf_token}'
    - Cookie: '{token.init:response.cookie.SH_UT.raw}'
  body:
      csOrderDetailsRequest:
        orderId: 'ABC'
response:
  code: 400
---
comment: invalid proxiedId
verbose: true
id: badRequest4
request:
  method: POST
  subDomain: api-dev
  uri: '/accountmanagement/csorderdetails/v1/'
  headers:
    - Accept: application/json
    - Content-Type: application/json
    - X-csrf-Token: '{web.login:response.body.login.csrf_token}'
    - Cookie: '{token.init:response.cookie.SH_UT.raw}'
  body:
      csOrderDetailsRequest:
        proxiedId: 'ABC'
response:
  code: 400
---
comment: invalid start
verbose: true
id: badRequest5
request:
  method: POST
  subDomain: api-dev
  uri: '/accountmanagement/csorderdetails/v1/'
  headers:
    - Accept: application/json
    - Content-Type: application/json
    - X-csrf-Token: '{web.login:response.body.login.csrf_token}'
    - Cookie: '{token.init:response.cookie.SH_UT.raw}'
  body:
      csOrderDetailsRequest:
        proxiedId: '1'
        start: 'ABC'
response:
  code: 400
---
comment: invalid row
verbose: true
id: badRequest6
request:
  method: POST
  subDomain: api-dev
  uri: '/accountmanagement/csorderdetails/v1/'
  headers:
    - Accept: application/json
    - Content-Type: application/json
    - X-csrf-Token: '{web.login:response.body.login.csrf_token}'
    - Cookie: '{token.init:response.cookie.SH_UT.raw}'
  body:
      csOrderDetailsRequest:
        proxiedId: '1'
        row: '1'
response:
  code: 400
---
comment: not found
verbose: true
id: notFound
request:
  method: POST
  subDomain: api-dev
  uri: '/accountmanagement/csorderdetails/v1/'
  headers:
    - Accept: application/json
    - Content-Type: application/json
    - X-csrf-Token: '{web.login:response.body.login.csrf_token}'
    - Cookie: '{token.init:response.cookie.SH_UT.raw}'
  body:
      csOrderDetailsRequest:
        proxiedId: '1'
response:
  code: 404
---
comment: success
verbose: true
id: success
request:
  method: POST
  subDomain: api-dev
  uri: '/accountmanagement/csorderdetails/v1/'
  headers:
    - Accept: application/json
    - Content-Type: application/json
    - X-csrf-Token: '{web.login:response.body.login.csrf_token}'
    - Cookie: '{token.init:response.cookie.SH_UT.raw}'
  body:
      csOrderDetailsRequest:
        orderId: '{extractId:groovy}'
response:
  code: 200
---
comment: seach STUBNET_USERS
id: getStubnetUser
type: sql
sql: select name_login from STUBNET_USERS where active=1 and rownum=1
---
comment: invalid access for update
verbose: true
request:
  method: PUT
  subDomain: api-dev
  uri: '/accountmanagement/csorderdetails/v1/'
  headers:
    - Accept: application/json
    - Content-Type: application/json
    - Authorization: '{fix:parameters.auth}'
  body: '{success:response.body}'
response:
  code: 403
---
comment: operatorId is empty
verbose: true
request:
  method: PUT
  subDomain: api-dev
  uri: '/accountmanagement/csorderdetails/v1/'
  headers:
    - Accept: application/json
    - Content-Type: application/json
    - Authorization: '{fix:parameters.auth}'
    - X-SH-Service-Context: '{role=R1}'
  body: '{success:response.body}'
response:
  code: 500
---
comment: update
verbose: true
id: updateCsOrderDetail
request:
  method: PUT
  subDomain: api-dev
  uri: '/accountmanagement/csorderdetails/v1/'
  headers:
    - Accept: application/json
    - Content-Type: application/json
    - X-csrf-Token: '{web.login:response.body.login.csrf_token}'
    - Cookie: '{token.init:response.cookie.SH_UT.raw}'
    - X-SH-Service-Context: '{role=R1,operatorId={getStubnetUser:sql.rows[0].name_login}}'
  body: '{success:response.body}'
response:
  code: 204